<Window x:Class="CompanyName.Atlas.Investments.Presentation.Views.SpreadChangesPlattform"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CompanyName.Atlas.Investments.Presentation.Views"
        xmlns:uiControls="clr-namespace:CompanyName.Atlas.UIControls;assembly=Atlas.UIControls"
        xmlns:properties="clr-namespace:CompanyName.Atlas.UIControls.Properties;assembly=Atlas.UIControls"
        xmlns:properties1="clr-namespace:CompanyName.Atlas.Investments.Properties"
        xmlns:converters="clr-namespace:CompanyName.Atlas.Investments.Presentation.Views.Converters"
        xmlns:data="clr-namespace:CompanyName.Atlas.Contracts.Presentation.Data;assembly=Atlas.Contracts"
        mc:Ignorable="d"
        Name="SpreadChangesWindow" 
         d:DesignHeight="600" d:DesignWidth="800"
         WindowStartupLocation="CenterOwner" AllowsTransparency="True" WindowStyle="None" Background="Transparent">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Atlas.UIControls;component/Assets/TabControls.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <SolidColorBrush x:Key="SystemButton.Static.Foreground" Color="#FF5A708C"/>
            <SolidColorBrush x:Key="SystemButton.MouseOver.Background" Color="WhiteSmoke"/>
            <SolidColorBrush x:Key="SystemButton.Pressed.Background" Color="#FF5A708C"/>
            <SolidColorBrush x:Key="SystemButton.Pressed.Foreground" Color="#FFEAEAEA"/>
            <SolidColorBrush x:Key="CloseSystemButton.MouseOver.Foreground" Color="#FFF55757"/>
            <Style x:Key="SystemButtonBase" TargetType="ButtonBase" >
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ButtonBase}">
                            <Border Name="Chrome"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding Foreground}"
                                SnapsToDevicePixels="true">
                                <ContentPresenter Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>

                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource AtlasContextButton.Static.Foreground}"/>
                        <Setter Property="Background" Value="{DynamicResource SystemButton.MouseOver.Background}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource AtlasContextButton.Static.Foreground}"/>
                        <Setter Property="Background" Value="{DynamicResource SystemButton.MouseOver.Background}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- This is the style of a system command button, those going at the top of the windows, allowing to minimize, maximize, restore it or close it. -->
            <Style x:Key="SystemButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <!--<Setter Property="Foreground" Value="White"/>-->
                <!--<Setter Property="Foreground" Value="{DynamicResource SystemButton.Static.Foreground}"/>-->
                <Setter Property="Width" Value="32"/>
                <Setter Property="Height" Value="28"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border" Background="{TemplateBinding Background}">
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>

                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource AtlasContextButton.Static.Foreground}"/>
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource SystemButton.Pressed.Background}"/>
                        <Setter Property="Foreground" Value="{DynamicResource SystemButton.Pressed.Foreground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!-- This the style of the close button. It's a little variation of the system button's style. -->
            <Style x:Key="CloseSystemButtonStyle" TargetType="Button" BasedOn="{StaticResource SystemButtonStyle}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Foreground" Value="{DynamicResource CloseSystemButton.MouseOver.Foreground}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Foreground" Value="{DynamicResource SystemButton.Pressed.Foreground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <SolidColorBrush x:Key="Default.Foreground" Color="#FF6F6F6F"/>
            <SolidColorBrush x:Key="Window.Default.Background" Color="White"/>
            <Storyboard x:Key="SlideIn" TargetName="ExportBorder">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" >
                    <EasingThicknessKeyFrame KeyTime="0" Value="0,0,300,0"/>
                    <EasingThicknessKeyFrame KeyTime="0:0:0.45" Value="0">
                        <EasingThicknessKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </EasingThicknessKeyFrame.EasingFunction>
                    </EasingThicknessKeyFrame>
                </ThicknessAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SlideOut" TargetName="ExportBorder">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" >
                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)">
                    <EasingThicknessKeyFrame KeyTime="0" Value="0"/>
                    <EasingThicknessKeyFrame KeyTime="0:0:0.35" Value="300,0,0,0">
                        <EasingThicknessKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </EasingThicknessKeyFrame.EasingFunction>
                    </EasingThicknessKeyFrame>
                </ThicknessAnimationUsingKeyFrames>

            </Storyboard>

            <Style TargetType="ListBox">
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <DockPanel Margin="5">
                                <CheckBox Margin="0,0,10,0" IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=IsSelected}" Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=Foreground}"
                                           Background="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=Background}"></CheckBox>
                                <TextBlock Text="{Binding Name}"></TextBlock>
                                <TextBlock Text="{Binding Description}" Margin="10,0" MaxWidth="320"></TextBlock>
                                <TextBlock Text="{Binding Letters}" ></TextBlock>
                            </DockPanel>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>

    </Window.Resources>
    <Window.Template>
        <ControlTemplate TargetType="Window">
            <Grid>
                <Border Name="ExportBorder" Height="400" Width="600" Background="{DynamicResource Window.Default.Background}" BorderBrush="{DynamicResource Default.Foreground}" BorderThickness="1">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"></RowDefinition>
                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="Auto"></RowDefinition>
                        </Grid.RowDefinitions>
                        <TextBlock Margin="10,2" Text="{x:Static properties1:Resources.SpreadChanges}" FontWeight="SemiBold" HorizontalAlignment="Left"></TextBlock>
                        <Button HorizontalAlignment="Right" VerticalAlignment="Top" Style="{StaticResource CloseSystemButtonStyle}" Command="{Binding YesNoCommand}"  Click="ButtonBase_OnClick3" FocusVisualStyle="{x:Null}">
                            <Button.Content>
                                <Grid Width="13" Height="12" RenderTransform="1,0,0,1,0,1">
                                    <Path Data="M0,0 L8,7 M8,0 L0,7 Z" Width="8" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                          Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="1.5"  />
                                </Grid>
                            </Button.Content>
                        </Button>
                        <!--<Button HorizontalAlignment="Right" Padding="5,0" Margin="2" Style="{DynamicResource CloseSystemButtonStyle}"
                        Command="Close" CommandTarget="{Binding ElementName=InteractWindow}">
                            <TextBlockText="X"></TextBlock>
                        </Button>-->
                        <DockPanel Grid.Row="1" >
                            <DockPanel.Resources>
                                <Storyboard x:Key="ContentSlideIn" >
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" >
                                        <EasingThicknessKeyFrame KeyTime="0" Value="100,0,0,0"/>
                                        <EasingThicknessKeyFrame KeyTime="0:0:0.45" Value="0">
                                            <EasingThicknessKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </EasingThicknessKeyFrame.EasingFunction>
                                        </EasingThicknessKeyFrame>
                                    </ThicknessAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="ContentSlideOut" >
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" >
                                        <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                        <EasingThicknessKeyFrame KeyTime="0" Value="0"/>
                                        <EasingThicknessKeyFrame KeyTime="0:0:0.35" Value="-100,0,0,0">
                                            <EasingThicknessKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </EasingThicknessKeyFrame.EasingFunction>
                                        </EasingThicknessKeyFrame>
                                    </ThicknessAnimationUsingKeyFrames>

                                </Storyboard>
                                <converters:NavigableStateToBooleanConverter x:Key="NavigableStateToBooleanConverter"/>
                                
                            </DockPanel.Resources>
                            <DockPanel.Style>
                                <Style TargetType="DockPanel" >
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Select}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Finish}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Path}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                        <Trigger Property="Visibility" Value="Visible">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard Storyboard="{StaticResource ContentSlideIn}"></BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard Storyboard="{StaticResource ContentSlideOut}"></BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </DockPanel.Style>
                            <Border Padding="20">
                                <DockPanel>
                                    <TextBlock Text="{x:Static properties1:Resources.SpreadChangesFor}"></TextBlock>
                                    <TextBlock Text="{Binding Name}"></TextBlock>
                                    <TextBlock Text="  "></TextBlock>
                                    <TextBlock Text="{Binding Code}"></TextBlock>
                                </DockPanel>
                               
                            </Border>
                        </DockPanel>
                        <DockPanel Grid.Row="1" >
                            <DockPanel.Resources>
                                <Storyboard x:Key="ContentSlideIn" >
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" >
                                        <EasingThicknessKeyFrame KeyTime="0" Value="100,0,0,0"/>
                                        <EasingThicknessKeyFrame KeyTime="0:0:0.45" Value="0">
                                            <EasingThicknessKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </EasingThicknessKeyFrame.EasingFunction>
                                        </EasingThicknessKeyFrame>
                                    </ThicknessAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="ContentSlideOut" >
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" >
                                        <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                        <EasingThicknessKeyFrame KeyTime="0" Value="0"/>
                                        <EasingThicknessKeyFrame KeyTime="0:0:0.35" Value="-100,0,0,0">
                                            <EasingThicknessKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </EasingThicknessKeyFrame.EasingFunction>
                                        </EasingThicknessKeyFrame>
                                    </ThicknessAnimationUsingKeyFrames>

                                </Storyboard>
                            </DockPanel.Resources>
                            <DockPanel.Style>
                                <Style TargetType="DockPanel" >
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Welcome}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Finish}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Path}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                        <Trigger Property="Visibility" Value="Visible">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard Storyboard="{StaticResource ContentSlideIn}"></BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard Storyboard="{StaticResource ContentSlideOut}"></BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </DockPanel.Style>

                            <uiControls:AtlasTabControl x:Name="ExportTabControl" Style="{DynamicResource ExportTabControlStyle}" Background="Transparent" SelectionChanged="Selector_OnSelectionChanged">
                            <uiControls:AtlasTabItem Header="{x:Static properties1:Resources.Projects}">
                                <TreeView x:Name="ProjectsTreeView" >
                                    <TreeView.ItemTemplate>
                                        <HierarchicalDataTemplate ItemsSource="{Binding Items}">
                                            <HierarchicalDataTemplate.Resources>
                                                    <converters:NavigableStateToBooleanConverter x:Key="NavigableStateToBooleanConverter"/>

                                                </HierarchicalDataTemplate.Resources>
                                                <DockPanel x:Name="MainDockPanel" HorizontalAlignment="Left" VerticalAlignment="Center"  Height="35" ToolTip="{Binding Name}">
                                               <StackPanel Orientation="Horizontal">
                                                        <ToggleButton  IsChecked="{Binding IsExpanded}"  x:Name="icon" Foreground="{Binding Foreground, ElementName=textBlock}">
                                                            <ToggleButton.Style>
                                                                <Style TargetType="{x:Type ToggleButton}">
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                                <Border>
                                                                                    <Grid x:Name="grid">
                                                                                        <Ellipse Fill="Transparent" Stroke="{x:Null}"/>
                                                                                        <Path x:Name="icon" Width="8" Height="8" Stretch="Uniform"
    												                                Margin="5"
    												                                Fill="{TemplateBinding Foreground}"
    												                                Data="{Binding IconData}"/>
                                                                                    </Grid>

                                                                                </Border>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Style>
                                                            </ToggleButton.Style>

                                                        </ToggleButton>
                                                        <CheckBox IsChecked="{Binding State, Converter={StaticResource NavigableStateToBooleanConverter},Mode=TwoWay}">
                                                        <CheckBox.Style>
                                                                <Style TargetType="{x:Type CheckBox}">
                                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                                                    <Setter Property="Margin" Value="4,0" />
                                                                    <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorder}" />
                                                                    <Setter Property="Foreground" Value="{Binding Foreground, ElementName=textBlock}" />
                                                                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType=Border}}" />
                                                                    <Setter Property="BorderThickness" Value="1" />

                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="{x:Type CheckBox}">
                                                                                <StackPanel x:Name="LayoutRoot" Orientation="Horizontal" Margin="{TemplateBinding Padding}">
                                                                                    <Border x:Name="CheckBorder" Width="16" Height="16" Margin="0,1,4,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                                                                        <Grid>
                                                                                            <Path x:Name="MarkMark" Width="10" Height="10" Margin="2" Visibility="Collapsed" Stretch="Fill" Fill="{TemplateBinding Foreground}" Data="F1 M -5,-5L 5,-5L 5,5L -5,5 Z "/>

                                                                                            <Path x:Name="CheckMark" Width="10" Height="10" Margin="2" Visibility="Collapsed" Stretch="Fill" Fill="{TemplateBinding Foreground}" Data="F1 M 15,21L 22,28L 32.9999,14.0001L 35.9999,17.0001L 22,34L 12.0001,24L 15,21 Z "/>
                                                                                           
                                                                                        </Grid>
                                                                                      </Border>
                                                                                    <TextBlock Text="{TemplateBinding Content}" VerticalAlignment="Center" />
                                                                                </StackPanel>
                                                                                <ControlTemplate.Triggers>
                                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonTextDisabled}" />
                                                                                    </Trigger>
                                                                                    <DataTrigger Binding="{Binding State}" Value="{x:Static data:NavigableState.Selected}">
                                                                                        <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                                                                                    </DataTrigger>
                                                                                    <DataTrigger Binding="{Binding State}" Value="{x:Static data:NavigableState.Marked}">
                                                                                        <Setter TargetName="MarkMark" Property="Visibility" Value="Visible" />
                                                                                    </DataTrigger>
                                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                                        <Setter TargetName="CheckBorder" Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />
                                                                                        <Setter TargetName="CheckBorder" Property="BorderBrush" Value="{DynamicResource ButtonBorderHover}" />
                                                                                        <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource ButtonTextHover}" />
                                                                                        <Setter TargetName="MarkMark" Property="Fill" Value="{DynamicResource ButtonTextHover}" />
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsPressed" Value="True">
                                                                                        <Setter TargetName="CheckBorder" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                                                                                        <Setter TargetName="CheckBorder" Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
                                                                                        <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource ButtonTextPressed}" />
                                                                                        <Setter TargetName="MarkMark" Property="Fill" Value="{DynamicResource ButtonTextPressed}" />
                                                                                    </Trigger>
                                                                                    <Trigger Property="IsFocused" Value="true">
                                                                                        <Setter TargetName="CheckBorder" Property="BorderBrush" Value="{DynamicResource Accent}" />
                                                                                    </Trigger>
                                                                                </ControlTemplate.Triggers>
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Style>
                                                            </CheckBox.Style>
                                                       
                                                        </CheckBox>

                                                    </StackPanel>
                                                  
                                                    <TextBlock x:Name="textBlock" Margin="0,0,10,0" Text="{Binding Name}"
    				                                    VerticalAlignment="Center" Width="Auto" HorizontalAlignment="Left"
    				                                    FontSize="{DynamicResource Default.FontSize}"
    				                                    FontFamily="{DynamicResource InvestmentElement.Default.FontFamily}"/>
                                                </DockPanel>
                                                <HierarchicalDataTemplate.Triggers>
                                                    
                                                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True">
                                                        <Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource InvestmentElementTreeViewItem.Selected.Foreground}"/>
                                                        <!--<Setter TargetName="icon" Property="Fill" Value="{DynamicResource InvestmentElementTreeViewItem.Selected.Foreground}"/>-->
                                                    </DataTrigger>
                                                    <Trigger SourceName="MainDockPanel" Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource InvestmentElementTreeViewItem.Static.Foreground}"/>
                                                    </Trigger>
                                                
                                                </HierarchicalDataTemplate.Triggers>
                                            </HierarchicalDataTemplate>
                                    </TreeView.ItemTemplate>
                                    <TreeView.ItemContainerStyle>
                                            <Style TargetType="{x:Type TreeViewItem}">
                                                <Setter Property="Background" Value="{DynamicResource InvestmentElementTreeViewItem.Static.Background}"/>
                                                <Setter Property="Foreground" Value="{DynamicResource InvestmentElementTreeViewItem.Static.Foreground}"/>
                                                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                                                            <ControlTemplate.Resources>
                                                               
                                                                <SolidColorBrush x:Key="InvestmentElementTreeViewItem.Dynamic.Background" Color="DimGray"/>
                                                                <converters:BackgroundOnDeepConverter x:Key="BackgroundOnDeepConverter"/>
                                                            </ControlTemplate.Resources>

                                                            <DockPanel >

                                                                <Border x:Name="Bd" SnapsToDevicePixels="true" DockPanel.Dock="Top" HorizontalAlignment="Left" ScrollViewer.VerticalScrollBarVisibility="Disabled" Height="35" Width="590" Background="{TemplateBinding DataContext, ConverterParameter={StaticResource InvestmentElementTreeViewItem.Dynamic.Background}, Converter={StaticResource BackgroundOnDeepConverter}}" >
                                                                    <Grid >
                                                                       
                                                                        <ContentPresenter x:Name="PART_Header"   ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" ScrollViewer.VerticalScrollBarVisibility="Disabled" Margin="16,0,0,0"/>
                                                                    
                                                                    </Grid>
                                                                </Border>
                                                                <DockPanel x:Name="selMarker" Height="5"  Panel.ZIndex="100" DockPanel.Dock="Top" Margin="0,0,0,-5" Visibility="Collapsed"  HorizontalAlignment="Left">
                                                                    <DockPanel >
                                                                        <Rectangle x:Name="rect2" Height="1" Margin="13,0,-0.5,0" Width="{Binding DeepThickness.Left}" VerticalAlignment="Top" Stroke="{DynamicResource InvestmentElementTreeViewItemBottomLine.Stroke}"/>
                                                                        <Path x:Name="selMark"  Width="8" Height="5" Data="M0,0L4,4 8,0"  Margin="0,0,-0.5,0" Stroke="{DynamicResource InvestmentElementTreeViewItemBottomLine.Stroke}" Fill="{Binding Background, ElementName=Bd}"/>
                                                                        <Rectangle x:Name="rect1" Height="1" Margin="0,0,13,0"   VerticalAlignment="Top" Stroke="{DynamicResource InvestmentElementTreeViewItemBottomLine.Stroke}"/>


                                                                    </DockPanel>
                                                                </DockPanel>
                                                                <Line x:Name="bottomLine" X2="400" Margin="0" Panel.ZIndex="100" StrokeThickness="1" Stroke="{DynamicResource InvestmentElementTreeViewItemBottomLine.Stroke}" VerticalAlignment="Top" d:LayoutOverrides="Width" DockPanel.Dock="Bottom" Visibility="Collapsed"/>
                                                                <ItemsPresenter x:Name="ItemsHost" Height="Auto" HorizontalAlignment="Left" Margin="0,0,0,0.5" Visibility="Collapsed"/>
                                                            </DockPanel>

                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsSelected" Value="True">
                                                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource InvestmentElementTreeViewItem.Selected.Background}"/>
                                                                    <Setter  Property="Background" Value="{DynamicResource InvestmentElementTreeViewItem.Selected.Foreground}"/>
                                                                    <Setter Property="Stroke" TargetName="bottomLine" Value="{DynamicResource InvestmentElementTreeViewItemBottomLine.Stroke}"/>
                                                                    <!--<Setter TargetName="icon" Property="Foreground" Value="{DynamicResource InvestmentElementTreeViewItem.Selected.Foreground}"/>-->
                                                                </Trigger>
                                                                <Trigger SourceName="Bd" Property="IsMouseOver" Value="True">
                                                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource InvestmentElementTreeViewItem.MouseOver.Background}"/>
                                                                    <!--<Setter TargetName="icon"  Property="Foreground" Value="{DynamicResource InvestmentElementTreeViewItem.Static.Foreground}"/>-->
                                                                    <!--<Setter TargetName="" Property="Foreground" Value="{DynamicResource InvestmentElementTreeViewItem.MouseOver.Foreground}"/>-->
                                                                </Trigger>
                                                                <MultiTrigger>
                                                                    <MultiTrigger.Conditions>
                                                                        <Condition Property="IsExpanded" Value="True"/>
                                                                        <Condition Property="HasItems" Value="True"/>
                                                                    </MultiTrigger.Conditions>
                                                                    <Setter Property="Visibility" Value="Visible" TargetName="ItemsHost"/>
                                                                    <!--<Setter Property="Visibility" Value="Visible" TargetName="bottomLine"/>-->
                                                                    <Setter Property="Visibility" Value="Visible" TargetName="selMarker"/>
                                                                </MultiTrigger>

                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsExpanded}" Value="True"/>
                                                                        <Condition Binding="{Binding HasItems}" Value="True"/>
                                                                        <Condition Binding="{Binding Depth}" Value="0"/>
                                                                    </MultiDataTrigger.Conditions>

                                                                    <Setter Property="Visibility" Value="Visible" TargetName="bottomLine"/>

                                                                </MultiDataTrigger>
                                                                
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>

                                            </Style>

                                        </TreeView.ItemContainerStyle>
                                </TreeView>
                                
                            </uiControls:AtlasTabItem>
                                <uiControls:AtlasTabItem Header="{x:Static properties1:Resources.PriceSystem}">
                                    <ListBox x:Name="PriceSystemListBox" >

                                    </ListBox>

                                </uiControls:AtlasTabItem>
                            </uiControls:AtlasTabControl>

                        </DockPanel>
                       
                        <DockPanel Grid.Row="1" >
                            <DockPanel.Resources>
                                <Storyboard x:Key="ContentSlideIn" >
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="1">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" >
                                        <EasingThicknessKeyFrame KeyTime="0" Value="100,0,0,0"/>
                                        <EasingThicknessKeyFrame KeyTime="0:0:0.45" Value="0">
                                            <EasingThicknessKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </EasingThicknessKeyFrame.EasingFunction>
                                        </EasingThicknessKeyFrame>
                                    </ThicknessAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="ContentSlideOut" >
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" >
                                        <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="0">
                                            <EasingDoubleKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </EasingDoubleKeyFrame.EasingFunction>
                                        </EasingDoubleKeyFrame>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                        <EasingThicknessKeyFrame KeyTime="0" Value="0"/>
                                        <EasingThicknessKeyFrame KeyTime="0:0:0.35" Value="-100,0,0,0">
                                            <EasingThicknessKeyFrame.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </EasingThicknessKeyFrame.EasingFunction>
                                        </EasingThicknessKeyFrame>
                                    </ThicknessAnimationUsingKeyFrames>

                                </Storyboard>
                            </DockPanel.Resources>
                            <DockPanel.Style>
                                <Style TargetType="DockPanel" >
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Select}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Welcome}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Path}">
                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                        </DataTrigger>
                                        <Trigger Property="Visibility" Value="Visible">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard Storyboard="{StaticResource ContentSlideIn}"></BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard Storyboard="{StaticResource ContentSlideOut}"></BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </DockPanel.Style>
                            <Border Padding="20">
                                <TextBlock Text="Finish and Advicing text"></TextBlock>
                            </Border>
                        </DockPanel>
                        <StackPanel Grid.Row="2" HorizontalAlignment="Right"  Orientation="Horizontal">
                            <Button Margin="10,4"  Content="{x:Static properties:Resources.Back}"  IsDefault="True"  Width="80" Height="35" Command="{Binding YesNoCommand}"  Click="ButtonBase_OnClick">
                                <Button.Style>
                                    <Style TargetType="Button" BasedOn="{StaticResource SystemButtonBase}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Welcome}">
                                                <Setter Property="Visibility" Value="Collapsed"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>

                            </Button>
                            <Button x:Name="NextButton"  Content="{x:Static properties:Resources.Next}"  Margin="10,4" IsDefault="True" Width="80" Height="35" Click="NextButton_OnClick">
                                <Button.Style>
                                    <Style TargetType="Button" BasedOn="{StaticResource SystemButtonBase}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Finish}">
                                                <Setter Property="Visibility" Value="Collapsed"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>

                            </Button>
                            <Button Margin="10,4" x:Name="CancelButton" Content="{x:Static properties:Resources.Cancel}" IsCancel="True" Width="80" Height="35" Command="{Binding YesNoCommand}" Click="ButtonBase_OnClick">
                                <Button.Style>
                                    <Style TargetType="Button" BasedOn="{StaticResource SystemButtonBase}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:SpreadChangesPlattform},Path=TransferState}" Value="{x:Static uiControls:AtlasTransferWizardState.Finish}">
                                                <Setter  Property="Content" Value="{x:Static properties:Resources.Finish}"></Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ElementName=NextButton,Path=Visibility}" Value="{x:Static Visibility.Collapsed}">
                                                <Setter  Property="Content" Value="{x:Static properties:Resources.Finish}"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>

                            </Button>
                        </StackPanel>
                    </Grid>
                </Border>
            </Grid>

            <ControlTemplate.Triggers>
                <EventTrigger RoutedEvent="Loaded" >
                    <EventTrigger.Actions>
                        <BeginStoryboard Storyboard="{StaticResource SlideIn}"></BeginStoryboard>
                    </EventTrigger.Actions>
                    <!--<Trigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource SlideOut}" Name="SlideOutStoryboard">
                            
                        </BeginStoryboard>
                    </Trigger.ExitActions>-->
                </EventTrigger>
                <!--<EventTrigger RoutedEvent="Unloaded">
                    <EventTrigger.Actions>
                        <BeginStoryboard Storyboard="{StaticResource SlideOut}"></BeginStoryboard>
                    </EventTrigger.Actions>
                </EventTrigger>-->
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Window.Template>
</Window>
