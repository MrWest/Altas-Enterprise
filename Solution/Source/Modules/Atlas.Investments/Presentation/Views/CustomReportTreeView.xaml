<TreeView
          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
          xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
          xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
          xmlns:local="clr-namespace:CompanyName.Atlas.Investments.Presentation.Views"
          xmlns:System="clr-namespace:System;assembly=mscorlib"
          xmlns:uiControls="clr-namespace:CompanyName.Atlas.UIControls;assembly=Atlas.UIControls"
          xmlns:converters="clr-namespace:CompanyName.Atlas.Investments.Presentation.Views.Converters"
          xmlns:data="clr-namespace:CompanyName.Atlas.Contracts.Presentation.Data;assembly=Atlas.Contracts"
          xmlns:properties="clr-namespace:CompanyName.Atlas.Investments.Properties"
          xmlns:entities="clr-namespace:CompanyName.Atlas.Investments.Domain.Entities"
          xmlns:reporting="clr-namespace:CompanyName.Atlas.Investments.Presentation.ViewModels.Reporting"
          x:Class="CompanyName.Atlas.Investments.Presentation.Views.CustomReportTreeView"
          mc:Ignorable="d"
          d:DesignHeight="300" d:DesignWidth="400">

    <TreeView.Resources>

        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:BackgroundOnDeepConverter x:Key="BackgroundOnDeepConverter"/>

        <Style x:Key="CustomReportTreeViewCollapserButtonBaseStyle" TargetType="{x:Type ButtonBase}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Background" Value="{DynamicResource DataGrid.Static.Background}"/>
            <Setter Property="Foreground" Value="{DynamicResource DataGrid.Static.Foreground}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" FocusVisualStyle="{x:Null}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background"  Value="{DynamicResource DataGridCell.MouseOver.Background}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource DataGridCell.Pressed.Background}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background"  Value="{DynamicResource DataGridCell.Disabled.Background}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource DataGridCell.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Height" Value="35"/>
            <Setter Property="Padding" Value="0"/>
        </Style>

        <Style x:Key="CustomReportTreeViewCollapserButtonStyle"
    		BasedOn="{StaticResource CustomReportTreeViewCollapserButtonBaseStyle}"
    		TargetType="{x:Type Button}"/>

        <Style x:Key="CustomReportTreeViewCollapserToggleButtonStyle"
    		BasedOn="{StaticResource CustomReportTreeViewCollapserButtonBaseStyle}"
    		TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" FocusVisualStyle="{x:Null}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background"  Value="{DynamicResource DataGridCell.MouseOver.Background}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background"  Value="{DynamicResource DataGridCell.Pressed.Background}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource DataGridCell.Disabled.Background}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource DataGridCell.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <HierarchicalDataTemplate x:Key="InvestmentElementDataTemplate" ItemsSource="{Binding Items.Items}">
            <DockPanel x:Name="MainDockPanel" HorizontalAlignment="Left" VerticalAlignment="Center"  Width="400" Height="35" ToolTip="{Binding Name}">
             

                <uiControls:EditableTextBlock x:Name="textBlock" Margin="0,0,10,0" Text="{Binding LimitedName}" 
    				VerticalAlignment="Center" Width="Auto" HorizontalAlignment="Left" 
    				FontSize="{DynamicResource Default.FontSize}" InEdition="{Binding RelativeSource={RelativeSource AncestorType=local:CustomReportTreeView},Path=InEdition,Mode=OneWayToSource}"
    				FontFamily="{DynamicResource InvestmentElement.Default.FontFamily}"/>
            </DockPanel>

            <HierarchicalDataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}}" Value="True">
                    <Setter TargetName="textBlock" Property="Text" Value="{Binding ShortName}"/>
                    <!--<Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource CustomReportTreeViewItem.MouseOver.Foreground}"/>-->
                    <!--<Setter TargetName="icon" Property="Fill" Value="{DynamicResource CustomReportTreeViewItem.MouseOver.Foreground}"/>-->
                </DataTrigger>
                <DataTrigger Binding="{Binding IsCollapsed, RelativeSource={RelativeSource FindAncestor, AncestorType=local:CustomReportTreeView}}" Value="True">
                    <Setter TargetName="textBlock" Property="Text" Value="{Binding EvenShortterName,Mode=OneWay}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True">
                    <Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource CustomReportTreeViewItem.Selected.Foreground}"/>
                    <!--<Setter TargetName="icon" Property="Fill" Value="{DynamicResource CustomReportTreeViewItem.Selected.Foreground}"/>-->
                </DataTrigger>
                <Trigger SourceName="MainDockPanel" Property="IsMouseOver" Value="True">
                    <Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource CustomReportTreeViewItem.Static.Foreground}"/>
                </Trigger>
                <!--<DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True">
                    <Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource CustomReportTreeViewItem.Static.Foreground}"/>
                    -->
                <!--<Setter TargetName="icon" Property="Fill" Value="{DynamicResource CustomReportTreeViewItem.Static.Foreground}"/>-->
                <!--
                </DataTrigger>-->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}}" Value="True"/>
                        <Condition Binding="{Binding InEdition, ElementName=textBlock}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Text" Value="{Binding Name}" TargetName="textBlock"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}}" Value="True"/>
                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource CustomReportTreeViewItem.Static.Foreground}"/>
                </MultiDataTrigger>
            </HierarchicalDataTemplate.Triggers>
        </HierarchicalDataTemplate>

        <Style x:Key="CustomReportTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="{DynamicResource DataGrid.Static.Background}"/>
            <Setter Property="Foreground" Value="{DynamicResource DataGrid.Static.Foreground}"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <!--<Style.Triggers >
                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                    <Setter TargetName="Bd" Property="Foreground" Value="{DynamicResource CustomReportTreeViewItem.Selected.Foreground}"/>
                </DataTrigger>
            </Style.Triggers>-->
            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>-->
            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="CollapseTemplate">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="Bd">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="400"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="50">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="ItemsHost">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="400"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="50">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="selMarker">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="400"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="50"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="ExpandTemplate">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="Bd">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="50"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="400">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="ItemsHost">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="50"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="400">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="selMarker">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="50"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="400"/>
                                </DoubleAnimationUsingKeyFrames>
                                
                            </Storyboard>
                            <Storyboard x:Key="ExpandStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="200">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="CollapseStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" >
                                    <EasingDoubleKeyFrame KeyTime="0" Value="200"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Style x:Key="CommandButtonBaseStyle" TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="{x:Null}"/>
                                <Setter Property="Width" Value="16"/>
                                <Setter Property="Height" Value="20"/>
                                <Setter Property="Foreground" Value="{DynamicResource DataGrid.Static.Foreground}"/>

                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border x:Name="border" BorderThickness="0" Background="{TemplateBinding Background}"
    											Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                                <Path x:Name="path"
    												Width="12" Height="12"
    												Fill="{TemplateBinding Foreground}"
    												Data="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
    												Stretch="Uniform"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>

                            <Style x:Key="AddCommandButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CommandButtonBaseStyle}">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Foreground" Value="{DynamicResource InvestmentElementAddCommandAddRootInvestmentElementButton.MouseOver.Foreground}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Foreground" Value="{DynamicResource InvestmentElementCommandAddRootInvestmentElementButton.Pressed.Foreground}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                            <Style x:Key="PrintCommandButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CommandButtonBaseStyle}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HasItems}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"></Setter>
                                    </DataTrigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Foreground" Value="{DynamicResource InvestmentElementTreeView.Static.Background}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Foreground" Value="{DynamicResource InvestmentElementTreeViewItem.Static.Background}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                            <Style x:Key="DeleteCommandButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CommandButtonBaseStyle}">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Foreground" Value="{DynamicResource InvestmentElementDeleteCommandDataGridCell.MouseOver.Foreground}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Foreground" Value="{DynamicResource InvestmentElementCommandDataGridCell.Pressed.Foreground}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="LightGray"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                            <SolidColorBrush x:Key="CustomReportTreeViewItem.Dynamic.Background" Color="#f3f2e9"/>
                        </ControlTemplate.Resources>

                        <DockPanel >

                            <Border x:Name="Bd" SnapsToDevicePixels="true" DockPanel.Dock="Top" HorizontalAlignment="Left" ScrollViewer.VerticalScrollBarVisibility="Disabled"  Background="{TemplateBinding DataContext, ConverterParameter={StaticResource CustomReportTreeViewItem.Dynamic.Background}, Converter={StaticResource BackgroundOnDeepConverter}}" Width="400">
                                <Grid >
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="35"></RowDefinition>
                                        <RowDefinition Height="Auto"></RowDefinition>
                                    </Grid.RowDefinitions>
                                    <ToggleButton  IsChecked="{Binding IsExpanded}"  x:Name="icon"  HorizontalAlignment="Left" Foreground="{DynamicResource DataGrid.Static.Foreground}">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border>
                                                                <Grid x:Name="grid">
                                                                    <Ellipse Fill="Transparent" Stroke="{x:Null}"/>
                                                                    <Path x:Name="icon" Width="8" Height="8" Stretch="Uniform"
    												Margin="5"
    												Fill="{TemplateBinding Foreground}"
    												Data="{Binding IconData}"/>
                                                                </Grid>

                                                            </Border>

                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>

                                    </ToggleButton>

                                    <ContentPresenter x:Name="PART_Header"   ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" ScrollViewer.VerticalScrollBarVisibility="Disabled" Margin="16,0,0,0"/>
                                    <StackPanel x:Name="commandsPanel"  Height="Auto" Width="Auto" HorizontalAlignment="Right"
    									Orientation="Horizontal" VerticalAlignment="Center"
                                                Background="{Binding ElementName=Bd,Path=Background}"
    									Margin="0,0,3,0" Visibility="{Binding IsMouseOver, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=Bd, Mode=OneWay}">
                                        <!--<Button Style="{DynamicResource AddCommandButtonStyle}"
    										Command="{Binding Elements.AddCommand}"                                           
    										ToolTip="{Binding AddInvestmentElemementButtonTooltip, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:CustomReportTreeView}}}"
    										Content="F1 M 51.5487,37.9814L 56.814,41.0534L 50.3383,48.7636L 50.3383,48.8841L 60.0205,46.9565L 60.0205,53.0403L 50.2777,51.414L 50.2777,51.5344L 56.814,59.0037L 51.4882,62.0757L 47.978,52.7994L 47.8569,52.7994L 44.4072,62.0757L 39.2025,59.0037L 45.6782,51.4742L 45.6177,51.3537L 36.1159,53.0403L 36.1159,46.9565L 45.5571,48.8841L 45.5571,48.7636L 39.2025,41.1137L 44.5888,37.9814L 47.9174,47.3179L 48.0385,47.3179L 51.5487,37.9814 Z M 20,17L 43.25,17L 56,29.75L 56,39L 52,36.75L 52,34L 39,34L 39,21L 24,21L 24,55L 41,55L 37.5,59L 20,59L 20,17 Z M 43,22.25L 43,30L 50.75,30L 43,22.25 Z "/>
                                        <Button Style="{DynamicResource DeleteCommandButtonStyle}"
    										Command="{Binding DeleteMySelfCommand}"
    										CommandParameter="{Binding ''}"                                                
    										ToolTip="{Binding DeleteInvestmentElemementButtonTooltip, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:CustomReportTreeView}}}"
    										Content="F1 M 25.3333,23.75L 50.6667,23.75C 51.5411,23.75 51.8541,27.3125 51.8541,27.3125L 24.1458,27.3125C 24.1458,27.3125 24.4589,23.75 25.3333,23.75 Z M 35.625,19.7917L 40.375,19.7917C 40.8122,19.7917 41.9583,20.9378 41.9583,21.375C 41.9583,21.8122 40.8122,22.9584 40.375,22.9584L 35.625,22.9584C 35.1878,22.9584 34.0416,21.8122 34.0416,21.375C 34.0416,20.9378 35.1878,19.7917 35.625,19.7917 Z M 27.7083,28.5L 48.2916,28.5C 49.1661,28.5 49.875,29.2089 49.875,30.0834L 48.2916,53.8334C 48.2916,54.7078 47.5828,55.4167 46.7083,55.4167L 29.2917,55.4167C 28.4172,55.4167 27.7083,54.7078 27.7083,53.8334L 26.125,30.0834C 26.125,29.2089 26.8339,28.5 27.7083,28.5 Z M 30.0833,31.6667L 30.4792,52.25L 33.25,52.25L 32.8542,31.6667L 30.0833,31.6667 Z M 36.4167,31.6667L 36.4167,52.25L 39.5833,52.25L 39.5833,31.6667L 36.4167,31.6667 Z M 43.1458,31.6667L 42.75,52.25L 45.5208,52.25L 45.9167,31.6667L 43.1458,31.6667 Z "/>-->
                                        <Grid >
                                            <Grid.Style>
                                                <Style TargetType="Grid">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsCollapsed, RelativeSource={RelativeSource AncestorType=local:CustomReportTreeView}, Mode=OneWay}" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:CustomReportTreeView},Path=InEdition,Mode=OneWay}" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                                                        </DataTrigger>

                                                    </Style.Triggers>
                                                </Style>
                                            </Grid.Style>
                                            <StackPanel VerticalAlignment="Center"   Orientation="Horizontal"  Margin="0,0,17,0">
                                                <!--<DockPanel DataContext="{Binding Items}">-->
                                                <Button Style="{DynamicResource PrintCommandButtonStyle}"
                                                    Command="{Binding RelativeSource={RelativeSource AncestorType=local:CustomReportTreeView},Path=PrintCommand}"
                                                    ToolTip="{x:Static properties:Resources.PreView}"
                                                    Content="F1 M 25,27L 25,17L 51,17L 51,27L 47,27L 47,21L 29,21L 29,27L 25,27 Z M 16,28L 60,28L 60,51L 52,51L 52,46L 55,46L 55,33L 21,33L 21,46L 24,46L 24,51L 16,51L 16,28 Z M 25,39L 28,39L 28,52L 35,52L 35,59L 48,59L 48,39L 51,39L 51,62L 33,62L 25,54L 25,39 Z M 46,55L 38,55L 38,52L 46,52L 46,55 Z M 46,49L 30,49L 30,46L 46,46L 46,49 Z M 46,43L 30,43L 30,40L 46,40L 46,43 Z ">
                                                </Button>

                                                <!--<Button Style="{DynamicResource PrintCommandButtonStyle}"
                                                    Command="{Binding RelativeSource={RelativeSource AncestorType=local:CustomReportTreeView},Path=ExcelExport}"
                                                    ToolTip="{x:Static properties:Resources.PreView}"
                                                    Content="F1 M 25,27L 25,17L 51,17L 51,27L 47,27L 47,21L 29,21L 29,27L 25,27 Z M 16,28L 60,28L 60,51L 52,51L 52,46L 55,46L 55,33L 21,33L 21,46L 24,46L 24,51L 16,51L 16,28 Z M 25,39L 28,39L 28,52L 35,52L 35,59L 48,59L 48,39L 51,39L 51,62L 33,62L 25,54L 25,39 Z M 46,55L 38,55L 38,52L 46,52L 46,55 Z M 46,49L 30,49L 30,46L 46,46L 46,49 Z M 46,43L 30,43L 30,40L 46,40L 46,43 Z ">
                                                </Button>-->

                                                <Button Style="{DynamicResource AddCommandButtonStyle}"
                                                    Command="{Binding Items.AddCommand}"
                                                    ToolTip="{Binding NewText}"
                                                    Content="F1 M 51.5487,37.9814L 56.814,41.0534L 50.3383,48.7636L 50.3383,48.8841L 60.0205,46.9565L 60.0205,53.0403L 50.2777,51.414L 50.2777,51.5344L 56.814,59.0037L 51.4882,62.0757L 47.978,52.7994L 47.8569,52.7994L 44.4072,62.0757L 39.2025,59.0037L 45.6782,51.4742L 45.6177,51.3537L 36.1159,53.0403L 36.1159,46.9565L 45.5571,48.8841L 45.5571,48.7636L 39.2025,41.1137L 44.5888,37.9814L 47.9174,47.3179L 48.0385,47.3179L 51.5487,37.9814 Z M 20,17L 43.25,17L 56,29.75L 56,39L 52,36.75L 52,34L 39,34L 39,21L 24,21L 24,55L 41,55L 37.5,59L 20,59L 20,17 Z M 43,22.25L 43,30L 50.75,30L 43,22.25 Z ">
                                                </Button>

                                            </StackPanel>
                                            <uiControls:ConfirmationView  DataContext="{Binding}"  Command="{Binding DeleteMySelfCommand}"
                                                                 ToolTip="{Binding DeleteText}"   Background="{Binding ElementName=Bd,Path=Background}" RelativeMargin="0,0,0,0" Padding="0,0,0,0"></uiControls:ConfirmationView>

                                        </Grid>
                                    </StackPanel>

                                    <Border x:Name="SettingsBorder" Grid.Row="1" d:DataContext="{d:DesignInstance reporting:IInvestmentChildCustomReportSettingsPresenter}" Height="0" Padding="18,0">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Style.Triggers>

                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem},Path=IsSelected}" Value="True"/>
                                                                <Condition Binding="{Binding HasItems}" Value="False"/>
                                                        </MultiDataTrigger.Conditions>

                                                        <MultiDataTrigger.EnterActions>
                                                        <BeginStoryboard Storyboard="{StaticResource ExpandStoryboard}"></BeginStoryboard>
                                                        </MultiDataTrigger.EnterActions>
                                                        <MultiDataTrigger.ExitActions>
                                                            <BeginStoryboard Storyboard="{StaticResource CollapseStoryboard}"></BeginStoryboard>
                                                        </MultiDataTrigger.ExitActions>
                                                       

                                                    </MultiDataTrigger>

                                                    <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem},Path=IsSelected}" Value="True">
                                                        <DataTrigger.EnterActions>
                                                            <BeginStoryboard Storyboard="{StaticResource ExpandStoryboard}"></BeginStoryboard>
                                                        </DataTrigger.EnterActions>
                                                        <DataTrigger.ExitActions>
                                                            <BeginStoryboard Storyboard="{StaticResource CollapseStoryboard}"></BeginStoryboard>
                                                        </DataTrigger.ExitActions>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding HasItems}" Value="True">
                                                        <Setter Property="Visibility" Value="Collapsed"></Setter>
                                                    </DataTrigger>-->
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                        <StackPanel  HorizontalAlignment="Left">
                                            <TextBlock x:Name="RefTextBlock" Text="{x:Static properties:Resources.OrderBy}" DockPanel.Dock="Top" FontWeight="SemiBold"></TextBlock>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                    <RowDefinition Height="Auto"></RowDefinition>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                                </Grid.ColumnDefinitions>

                                                <CheckBox Grid.ColumnSpan="5" IsChecked="{Binding ShowInvestmentElements}"  Margin="0,2" Content="{x:Static properties:Resources.InvestmentElement}" DockPanel.Dock="Top"  FontSize="12"></CheckBox>
                                                <CheckBox Grid.Row="1" Grid.ColumnSpan="5" IsChecked="{Binding ShowBudgetComponents}"  Margin="0,2"  Content="{x:Static properties:Resources.BudgetComponent}"   FontSize="12"></CheckBox>

                                                <CheckBox Grid.Row="2"  IsChecked="{Binding ShowEquipment}" Padding="0,0,5,0" Margin="0,2"  Content="{x:Static properties:Resources.EquipAbv}" ToolTip="{x:Static properties:Resources.EquipmentComponent}" Width="78"   FontSize="12" ></CheckBox>
                                                <CheckBox Grid.Row="2" Grid.Column="1"  IsChecked="{Binding ShowConstruction}" Margin="0,2"  Padding="0,0,5,0" Content="{x:Static properties:Resources.ConstAbv}"  ToolTip="{x:Static properties:Resources.ConstructionComponent}" Width="78"   FontSize="12"></CheckBox>
                                                <CheckBox Grid.Row="2" Grid.Column="2" IsChecked="{Binding ShowOthers}" Margin="0,2"  Padding="0,0,5,0" Content="{x:Static properties:Resources.OthersAbv}" ToolTip="{x:Static properties:Resources.OtherExpensesComponent}" Width="78"   FontSize="12"></CheckBox>
                                                <CheckBox Grid.Row="2" Grid.Column="3" IsChecked="{Binding ShowWorkCapital}" Margin="0,2"  Padding="0,0,5,0" Content="{x:Static properties:Resources.WorkCapAbv}" ToolTip="{x:Static properties:Resources.WorkCapitalComponent}" Width="78"  FontSize="12" ></CheckBox>

                                                <CheckBox Grid.Row="3" IsChecked="{Binding ShowSubSpecialities}"   Padding="0,0,5,0" Margin="0,2"   Content="{x:Static properties:Resources.SubSpecialities}" ToolTip="{x:Static properties:Resources.SubSpeciality}" Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox Grid.Row="3" Grid.Column="1" IsChecked="{Binding ShowSubExpeseConcepts}" Margin="0,2"   Padding="0,0,5,0" Content="{x:Static properties:Resources.ExpenseConcepts}"  ToolTip="{x:Static properties:Resources.ExpenseConcepts}"  Width="78"  FontSize="12"  ></CheckBox>
                                                <CheckBox Grid.Row="3" Grid.Column="2"  IsChecked="{Binding ShowCategories}" Margin="0,2"  Padding="0,0,5,0" Content="{x:Static properties:Resources.Category}" ToolTip="{x:Static properties:Resources.Categories}" Width="78"  FontSize="12" ></CheckBox>

                                                <CheckBox  Grid.Row="4" Grid.ColumnSpan="5" IsChecked="{Binding ShowActivities}"  Margin="0,2"  HorizontalAlignment="Left" Content="{x:Static properties:Resources.Activities}" ToolTip="{x:Static properties:Resources.Activities}" Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox  Grid.Row="5"  Grid.ColumnSpan="5" IsChecked="{Binding ShowResources}"  Margin="0,2"  HorizontalAlignment="Left" Content="{x:Static properties:Resources.Resources_}" ToolTip="{x:Static properties:Resources.RecieveDate}" Width="78"  FontSize="12" ></CheckBox>

                                                <TextBlock Grid.Row="6" Grid.ColumnSpan="5" Text="{x:Static properties:Resources.ShowColumns}"   FontWeight="SemiBold"></TextBlock>

                                                <CheckBox  Grid.Row="7"  IsChecked="{Binding ShowMU}" Margin="0,2"  Padding="0,0,5,0" Content="{x:Static properties:Resources.MeasurementUnit}"  Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox  Grid.Row="7" Grid.Column="1" IsChecked="{Binding ShowQuantity}" Margin="0,2" Padding="0,0,5,0"  Content="{x:Static properties:Resources.Quantity}"  Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox Grid.Row="7" Grid.Column="2"  IsChecked="{Binding ShowCurrency}" Margin="0,2"  Padding="0,0,5,0" Content="{x:Static properties:Resources.Currency}"  Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox  Grid.Row="7" Grid.Column="3" IsChecked="{Binding ShowUC}" Margin="0,2"  Padding="0,0,5,0" Content="{x:Static properties:Resources.UnitaryCost}"  Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox  Grid.Row="7" Grid.Column="4" IsChecked="{Binding ShowCost}" Margin="0,2"   Padding="0,0,5,0" Content="{x:Static properties:Resources.Cost}"  Width="78"  FontSize="12"  ></CheckBox>

                                            </Grid>
                                            
                                            <!--<StackPanel  HorizontalAlignment="Left">
                                                <CheckBox IsChecked="{Binding ShowInvestmentElements}"  Margin="0,2" Content="{x:Static properties:Resources.InvestmentElement}" DockPanel.Dock="Top"  FontSize="12"></CheckBox>
                                                <CheckBox IsChecked="{Binding ShowBudgetComponents}"  Margin="0,2"  Content="{x:Static properties:Resources.BudgetComponent}"   FontSize="12"></CheckBox>
                                                <DockPanel Margin="0,1"  HorizontalAlignment="Left">
                                                    <CheckBox IsChecked="{Binding ShowEquipment}" Margin="0,0,5,0"  Content="{x:Static properties:Resources.EquipAbv}" ToolTip="{x:Static properties:Resources.EquipmentComponent}" Width="78"   FontSize="12" ></CheckBox>
                                                    <CheckBox IsChecked="{Binding ShowConstruction}"  Margin="0,0,5,0" Content="{x:Static properties:Resources.ConstAbv}"  ToolTip="{x:Static properties:Resources.ConstructionComponent}" Width="78"   FontSize="12"></CheckBox>
                                                    <CheckBox IsChecked="{Binding ShowOthers}"  Margin="0,0,5,0" Content="{x:Static properties:Resources.OthersAbv}" ToolTip="{x:Static properties:Resources.OtherExpensesComponent}" Width="78"   FontSize="12"></CheckBox>
                                                    <CheckBox IsChecked="{Binding ShowWorkCapital}"  Margin="0,0,5,0" Content="{x:Static properties:Resources.WorkCapAbv}" ToolTip="{x:Static properties:Resources.WorkCapitalComponent}" Width="78"  FontSize="12" ></CheckBox>
                                                </DockPanel>
                                                <DockPanel Margin="0,1"  HorizontalAlignment="Left">
                                                    <CheckBox IsChecked="{Binding ShowSubSpecialities}"  Margin="0,2"  Content="{x:Static properties:Resources.SubSpecialities}"  Width="78"  FontSize="12" ></CheckBox>
                                                    <CheckBox IsChecked="{Binding ShowSubExpeseConcepts}"  Margin="0,0,5,0" Content="{x:Static properties:Resources.ExpenseConcepts}"  ToolTip="{x:Static properties:Resources.ExpenseConcepts}"  Width="78"  FontSize="12"  ></CheckBox>
                                                    <CheckBox IsChecked="{Binding ShowCategories}"  Margin="0,0,5,0" Content="{x:Static properties:Resources.Category}" ToolTip="{x:Static properties:Resources.Categories}" Width="78"  FontSize="12" ></CheckBox>
                                                   
                                                </DockPanel>

                                                <CheckBox IsChecked="{Binding ShowActivities}"  Margin="0,2"  HorizontalAlignment="Left" Content="{x:Static properties:Resources.Activities}"  Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox IsChecked="{Binding ShowResources}"  Margin="0,2"  HorizontalAlignment="Left" Content="{x:Static properties:Resources.Resources_}"  Width="78"  FontSize="12" ></CheckBox>
                                            </StackPanel>
                                            <TextBlock Text="{x:Static properties:Resources.ShowColumns}"  FontWeight="SemiBold"></TextBlock>
                                            <DockPanel HorizontalAlignment="Left">
                                                <CheckBox IsChecked="{Binding ShowMU}"  Margin="0,0,5,0" Content="{x:Static properties:Resources.MeasurementUnit}"  Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox IsChecked="{Binding ShowQuantity}" Margin="0,0,5,0"  Content="{x:Static properties:Resources.Quantity}"  Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox IsChecked="{Binding ShowCurrency}"  Margin="0,0,5,0" Content="{x:Static properties:Resources.Currency}"  Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox IsChecked="{Binding ShowUC}"  Margin="0,0,5,0" Content="{x:Static properties:Resources.UnitaryCost}"  Width="78"  FontSize="12" ></CheckBox>
                                                <CheckBox IsChecked="{Binding ShowCost}"  Margin="0,0,5,0" Content="{x:Static properties:Resources.Cost}"  Width="78"  FontSize="12"  ></CheckBox>
                                            </DockPanel>-->

                                        </StackPanel>
                                    </Border>
                                </Grid>
                            </Border>
                            <DockPanel x:Name="selMarker" Height="5"  Panel.ZIndex="100" DockPanel.Dock="Top" Margin="0,0,0,-5" Visibility="Collapsed" Width="400" HorizontalAlignment="Left">
                                <DockPanel >
                                    <Rectangle x:Name="rect2" Height="1" Margin="13,0,-0.5,0" Width="{Binding DeepThickness.Left}" VerticalAlignment="Top" Stroke="{DynamicResource CustomReportTreeViewItemBottomLine.Stroke}"/>
                                    <Path x:Name="selMark"  Width="8" Height="5" Data="M0,0L4,4 8,0"  Margin="0,0,-0.5,0" Stroke="{DynamicResource CustomReportTreeViewItemBottomLine.Stroke}" Fill="{Binding Background, ElementName=Bd}"/>
                                    <Rectangle x:Name="rect1" Height="1" Margin="0,0,13,0"   VerticalAlignment="Top" Stroke="{DynamicResource CustomReportTreeViewItemBottomLine.Stroke}"/>


                                </DockPanel>
                            </DockPanel>
                            <Line x:Name="bottomLine" X2="400" Margin="0" Panel.ZIndex="100" StrokeThickness="1" Stroke="{DynamicResource CustomReportTreeViewItemBottomLine.Stroke}" VerticalAlignment="Top" d:LayoutOverrides="Width" DockPanel.Dock="Bottom" Visibility="Collapsed"/>
                            <ItemsPresenter x:Name="ItemsHost" Height="Auto" HorizontalAlignment="Left" Margin="0,0,0,0.5" Visibility="Collapsed"/>
                        </DockPanel>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource DataGridCell.Selected.Background}"/>
                                <Setter  Property="Background" Value="{DynamicResource DataGridCell.Selected.Foreground}"/>
                                <Setter Property="Stroke" TargetName="bottomLine" Value="{DynamicResource CustomReportTreeViewItemBottomLine.Stroke}"/>
                                <Setter TargetName="icon" Property="Foreground" Value="{DynamicResource DataGridCell.Selected.Foreground}"/>
                                <Setter TargetName="SettingsBorder" Property="Visibility" Value="Visible"/>
                            </Trigger>
                            <Trigger SourceName="Bd" Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource CustomReportTreeViewItem.MouseOver.Background}"/>
                                <Setter TargetName="icon"  Property="Foreground" Value="{DynamicResource CustomReportTreeViewItem.Static.Foreground}"/>
                                <!--<Setter TargetName="" Property="Foreground" Value="{DynamicResource CustomReportTreeViewItem.MouseOver.Foreground}"/>-->
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsExpanded" Value="True"/>
                                    <Condition Property="HasItems" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Visibility" Value="Visible" TargetName="ItemsHost"/>
                                <!--<Setter Property="Visibility" Value="Visible" TargetName="bottomLine"/>-->
                                <Setter Property="Visibility" Value="Visible" TargetName="selMarker"/>
                            </MultiTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsExpanded}" Value="True"/>
                                    <Condition Binding="{Binding HasItems}" Value="True"/>
                                    <Condition Binding="{Binding Depth}" Value="0"/>
                                </MultiDataTrigger.Conditions>

                                <Setter Property="Visibility" Value="Visible" TargetName="bottomLine"/>

                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding IsCollapsed, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:CustomReportTreeView}}}" Value="True">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource CollapseTemplate}"/>
                                </DataTrigger.EnterActions>
                                <DataTrigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource ExpandTemplate}"/>
                                </DataTrigger.ExitActions>
                                <Setter Property="Width" Value="13" TargetName="rect2"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

    </TreeView.Resources>

    <TreeView.Style>
        <Style TargetType="{x:Type local:CustomReportTreeView}">
            <Setter Property="ItemTemplate" Value="{DynamicResource InvestmentElementDataTemplate}" />
            <Setter Property="ItemContainerStyle" Value="{DynamicResource CustomReportTreeViewItemStyle}" />
            <Setter Property="Background" Value="{DynamicResource DataGrid.Static.Background}"/>
            <Setter Property="Foreground" Value="{DynamicResource DataGrid.Static.Foreground}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="FontSize" Value="{DynamicResource Default.FontSize}"/>
            <Setter Property="FontFamily" Value="{DynamicResource InvestmentElement.Default.FontFamily}"/>
            <Setter Property="ItemsSource" Value="{Binding RelativeSource={RelativeSource Self}, Path=DataContext.Items}"/>
            <Setter Property="AddInvestmentElementButtonCommand" Value="{Binding RelativeSource={RelativeSource Self}, Path=DataContext.AddCommand}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeView}">

                        <ControlTemplate.Resources>
                            <Storyboard x:Key="Collapse">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="dockPanel">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="400"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="50">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="button">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="400"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="prjtext">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="400"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="filterDockPanel">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="400"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="searchBorder">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="15"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="searchBorder">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.08" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path1">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.133" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="400">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="grid">
                                    <EasingThicknessKeyFrame KeyTime="0" Value="13,28,0,28"/>
                                    <EasingThicknessKeyFrame KeyTime="0:0:0.15" Value="13,20,0,28">
                                        <EasingThicknessKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseIn"/>
                                        </EasingThicknessKeyFrame.EasingFunction>
                                    </EasingThicknessKeyFrame>
                                </ThicknessAnimationUsingKeyFrames>

                            </Storyboard>
                            <Storyboard x:Key="Expand">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="dockPanel">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="50"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="400">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="button">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="400">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="prjtext">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="400">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="filterDockPanel">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="400">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>

                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Width)" Storyboard.TargetName="searchBorder">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="15">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="searchBorder">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.08" Value="1">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>

                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path1">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="400"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.117" Value="400"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>

                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="grid">
                                    <EasingThicknessKeyFrame KeyTime="0" Value="13,-8,13,0"/>
                                    <EasingThicknessKeyFrame KeyTime="0:0:0.15" Value="13,0">
                                        <EasingThicknessKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseIn"/>
                                        </EasingThicknessKeyFrame.EasingFunction>
                                    </EasingThicknessKeyFrame>
                                </ThicknessAnimationUsingKeyFrames>

                            </Storyboard>
                            <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
                                <Setter Property="OverridesDefaultStyle" Value="true"/>
                                <Setter Property="IsTabStop" Value="false"/>
                                <Setter Property="Background" Value="{DynamicResource ScrollBarThumbBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ScrollBarThumbBorder}"/>
                                <Setter Property="BorderThickness" Value="1" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                            <Border Background="{TemplateBinding Background}"
                        						BorderBrush="{TemplateBinding BorderBrush}"
                        						BorderThickness="{TemplateBinding BorderThickness}">
                                                <Rectangle x:Name="Rect" Fill="{DynamicResource ScrollBarThumbForeground}" Margin="{TemplateBinding Padding}" />
                                            </Border>

                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="{DynamicResource ScrollBarThumbBackgroundHover}"/>
                                                    <Setter TargetName="Rect" Property="Fill" Value="{DynamicResource ScrollBarThumbForegroundHover}"/>
                                                </Trigger>
                                                <Trigger Property="IsDragging" Value="True">
                                                    <Setter Property="Background" Value="{DynamicResource ScrollBarThumbBackgroundDragging}"/>
                                                    <Setter TargetName="Rect" Property="Fill" Value="{DynamicResource ScrollBarThumbForegroundDragging}"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>

                            <Style x:Key="ScrollBarButton"
                        		TargetType="{x:Type RepeatButton}">
                                <Setter Property="OverridesDefaultStyle"
                        			Value="true"/>
                                <Setter Property="Background" Value="{DynamicResource ButtonBackground}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorder}"/>
                                <Setter Property="BorderThickness" Value="1" />
                                <Setter Property="Foreground" Value="{DynamicResource ButtonText}"/>
                                <Setter Property="Focusable"
                        			Value="false"/>
                                <Setter Property="IsTabStop"
                        			Value="false"/>
                                <Setter Property="HorizontalContentAlignment" Value="Center" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                            <Border Background="Transparent"
                        						BorderBrush="Transparent"
                        						BorderThickness="{TemplateBinding BorderThickness}"
                        						Width="{TemplateBinding Width}"
                        						Height="{TemplateBinding Height}">
                                                <ContentPresenter Margin="{TemplateBinding Padding}"
                        							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        							RecognizesAccessKey="True"
                        							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <!--<Setter Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />-->
                                                    <!--<Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderHover}" />-->
                                                    <Setter Property="Foreground" Value="{DynamicResource ButtonTextHover}" />
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <!--<Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />-->
                                                    <!--<Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />-->
                                                    <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>

                            <Style x:Key="ScrollBarPageButton"
                        		TargetType="{x:Type RepeatButton}">
                                <Setter Property="OverridesDefaultStyle"
                        			Value="true"/>
                                <Setter Property="Background"
                        			Value="Transparent"/>
                                <Setter Property="Focusable"
                        			Value="false"/>
                                <Setter Property="IsTabStop"
                        			Value="false"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                            <Rectangle Fill="{TemplateBinding Background}"
                        						Width="{TemplateBinding Width}"
                        						Height="{TemplateBinding Height}"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>

                            <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
                                <Setter Property="Background" Value="{DynamicResource ScrollBarBackground}"/>
                                <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
                                <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
                                <Setter Property="Value" Value="35"/>
                                <Setter Property="LargeChange" Value="35"/>
                                <Setter Property="SmallChange" Value="35"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                                            <Grid Name="Bg"
                          Background="Transparent"
                          SnapsToDevicePixels="true" >
                                                <Grid.RowDefinitions>
                                                    <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                                                    <RowDefinition Height="0.00001*"/>
                                                    <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                                                </Grid.RowDefinitions>
                                                <RepeatButton Style="{StaticResource ScrollBarButton}"
                                      IsEnabled="{TemplateBinding IsMouseOver}"
                                      Command="{x:Static ScrollBar.LineUpCommand}"
                                      Margin="0,-10,0,0">
                                                    <Path Width="15" Height="7" Stretch="Fill" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RepeatButton}}" Data="M 0 4 L 3.5 0 L 7 4 Z" />
                                                </RepeatButton>
                                                <!--<Track Grid.Row="1"
                               Name="PART_Track"
                               IsEnabled="{TemplateBinding IsMouseOver}"
                               IsDirectionReversed="true">
                                                    <Track.DecreaseRepeatButton>
                                                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageUpCommand}"/>
                                                    </Track.DecreaseRepeatButton>
                                                    <Track.IncreaseRepeatButton>
                                                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageDownCommand}"/>
                                                    </Track.IncreaseRepeatButton>
                                                    <Track.Thumb>
                                                        <Thumb Style="{StaticResource ScrollBarThumb}" Padding="4,0" />
                                                    </Track.Thumb>
                                                </Track>-->
                                                <RepeatButton Style="{StaticResource ScrollBarButton}" 
                                      Grid.Row="2"
                                      IsEnabled="{TemplateBinding IsMouseOver}"
                                      Command="{x:Static ScrollBar.LineDownCommand}"
                                      Margin="0,-45,0,0">
                                                    <Path Width="15" Height="7" Stretch="Fill" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RepeatButton}}" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                                                </RepeatButton>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="Orientation" Value="Horizontal">
                                        <Setter Property="Width" Value="Auto"/>
                                        <Setter Property="MinWidth" Value="0"/>
                                        <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                                        <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                    <Grid Name="Bg"
                                  Background="{TemplateBinding Background}"
                                  SnapsToDevicePixels="true" >
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                                            <ColumnDefinition Width="0.00001*"/>
                                                            <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                                        </Grid.ColumnDefinitions>
                                                        <RepeatButton Style="{StaticResource ScrollBarButton}"
                                              IsEnabled="{TemplateBinding IsMouseOver}"
                                              Command="{x:Static ScrollBar.LineLeftCommand}" 
                                              Margin="0,0,0,0">
                                                            <Path Width="4" Height="7" Stretch="Fill" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RepeatButton}}" Data="M 0 3.5 L 4 7 L 4 0 Z" />
                                                        </RepeatButton>
                                                        <Track Grid.Column="1"
                                       Name="PART_Track"
                                       IsEnabled="{TemplateBinding IsMouseOver}"
                                       IsDirectionReversed="False">
                                                            <Track.DecreaseRepeatButton>
                                                                <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                                            </Track.DecreaseRepeatButton>
                                                            <Track.IncreaseRepeatButton>
                                                                <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageRightCommand}"/>
                                                            </Track.IncreaseRepeatButton>
                                                            <Track.Thumb>
                                                                <Thumb Style="{StaticResource ScrollBarThumb}" Padding="0,4" />
                                                            </Track.Thumb>
                                                        </Track>
                                                        <RepeatButton Style="{StaticResource ScrollBarButton}"
                                              Grid.Column="2"
                                              IsEnabled="{TemplateBinding IsMouseOver}"
                                              Command="{x:Static ScrollBar.LineRightCommand}"
                                              Margin="0,0,0,0">
                                                            <Path Width="4" Height="7" Stretch="Fill" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RepeatButton}}" Data="M 0 0 L 0 7 L 4 3.5 Z" />
                                                        </RepeatButton>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>

                            <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}">
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                <Setter Property="VerticalScrollBarVisibility" Value="Auto" />

                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                            <Grid Background="Transparent">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>

                                                <Border x:Name="BorderPART_ScrollContentPresenter">
                                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                    Margin="{TemplateBinding Padding}"
                                                    Content="{TemplateBinding Content}"
                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}"/>

                                                </Border>

                                                <ScrollBar x:Name="PART_VerticalScrollBar"
                                      
                                       Minimum="0.0"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalOffset, Mode=OneWay}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"         
                                       Cursor="Arrow"
                                       AutomationProperties.AutomationId="VerticalScrollBar"/>
                                                <ScrollBar  x:Name="PART_HorizontalScrollBar"
                                        Orientation="Horizontal"
                                        Grid.Row="1"
                                        Minimum="0.0"
                                        Maximum="{TemplateBinding ScrollableWidth}"
                                        ViewportSize="{TemplateBinding ViewportWidth}"
                                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalOffset, Mode=OneWay}"
                                        Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                        Cursor="Arrow"
                                        AutomationProperties.AutomationId="HorizontalScrollBar"/>
                                            </Grid>

                                            <ControlTemplate.Triggers>
                                                <Trigger SourceName="PART_VerticalScrollBar" Property="Visibility" Value="Visible">
                                                    <Setter Property="Padding" TargetName="BorderPART_ScrollContentPresenter" Value="0,10,0,43" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>

                            <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
                                <Setter Property="Focusable" Value="false"/>
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                            <Grid Background="Transparent">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>

                                                <DockPanel Margin="{TemplateBinding Padding}">
                                                    <ScrollViewer DockPanel.Dock="Top"
                        								HorizontalScrollBarVisibility="Hidden"
                        								VerticalScrollBarVisibility="Hidden"
                        								Focusable="false">
                                                        <GridViewHeaderRowPresenter Margin="2,0,2,0"
                        									Columns="{Binding TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                        									ColumnHeaderContainerStyle="{Binding TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                        									ColumnHeaderTemplate="{Binding TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                        									ColumnHeaderTemplateSelector="{Binding TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                        									ColumnHeaderStringFormat="{Binding TemplatedParent.View.ColumnHeaderStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                        									AllowsColumnReorder="{Binding TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                        									ColumnHeaderContextMenu="{Binding TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                        									ColumnHeaderToolTip="{Binding TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                        									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                    </ScrollViewer>
                                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                        								KeyboardNavigation.DirectionalNavigation="Local"
                        								Content="{TemplateBinding Content}"
                        								ContentTemplate="{TemplateBinding ContentTemplate}"
                        								CanContentScroll="{TemplateBinding CanContentScroll}"
                        								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </DockPanel>

                                                <ScrollBar x:Name="PART_VerticalScrollBar"
                        							Grid.Column="1"
                        							Minimum="0.0"
                        							Maximum="{TemplateBinding ScrollableHeight}"
                        							ViewportSize="{TemplateBinding ViewportHeight}"
                        							Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                        							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                        							Cursor="Arrow"
                        							AutomationProperties.AutomationId="VerticalScrollBar"/>
                                                <ScrollBar  x:Name="PART_HorizontalScrollBar"
                        							Orientation="Horizontal"
                        							Grid.Row="1"
                        							Minimum="0.0"
                        							Maximum="{TemplateBinding ScrollableWidth}"
                        							ViewportSize="{TemplateBinding ViewportWidth}"
                        							Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                        							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                        							Cursor="Arrow"
                        							AutomationProperties.AutomationId="HorizontalScrollBar"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                            <Storyboard x:Key="FilterExpandStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)"  Storyboard.TargetName="filterDockPanel">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="35">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="filterDockPanel">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.08" Value="1">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="FilterCollapseStoryboard">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="filterDockPanel" >
                                    <EasingDoubleKeyFrame KeyTime="0" Value="35"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="filterDockPanel">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.08" Value="0">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>

                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>

                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <DockPanel x:Name="dockPanel" Width="400" HorizontalAlignment="Left">

                                <DockPanel DockPanel.Dock="Top" Background="{Binding ElementName=button,Path=Background}">
                                    <Grid  >

                                        <DockPanel VerticalAlignment="Bottom">
                                          
                                            <Button x:Name="button" DockPanel.Dock="Left" Width="400" Style="{DynamicResource CustomReportTreeViewCollapserButtonStyle}" ToolTip="{x:Static properties:Resources.AddInvElemButtonTooltip}"  Command="{Binding AddInvestmentElementButtonCommand, RelativeSource={RelativeSource AncestorType=local:CustomReportTreeView}}">

                                                <DockPanel Width="Auto" Height="35">
                                                    <Grid x:Name="grid" Width="20" Margin="8,0,15,0" Height="20" HorizontalAlignment="Left">
                                                        <Ellipse Fill="{TemplateBinding Foreground}" Stroke="{x:Null}"/>
                                                        <Line x:Name="lineVer" StrokeThickness="4" X1="10" X2="10" Y1="3" Y2="17" Stroke="{Binding Background, ElementName=button}"/>
                                                        <Line x:Name="lineHor" Stroke="{Binding Stroke, ElementName=lineVer}" Y1="10" Y2="10" X1="3" X2="17" StrokeThickness="4"/>
                                                    </Grid>
                                                    <TextBlock x:Name="textBlock" Text="{x:Static properties:Resources.Add}" Foreground="{TemplateBinding Foreground}" FontSize="14" VerticalAlignment="Center" Height="Auto" ScrollViewer.VerticalScrollBarVisibility="Disabled" Width="Auto" />

                                                </DockPanel>

                                            </Button>

                                        </DockPanel>
                                       
                                        <DockPanel x:Name="filterDockPanel" Height="0" Width="400" Opacity="0" VerticalAlignment="Top"  Background="{DynamicResource DataGrid.Static.Background}">
                                            <uiControls:FilterBox FilterCommand="{Binding FilterCommand}" Margin="5,0,10,0" Padding="6,0,10,0" MaxWidth="400"/>
                                        </DockPanel>
                                        <Border x:Name="searchBorder" HorizontalAlignment="Right"  Height="35" Width="15" Padding="0,7,0,0" Margin="0,0,10,0" >

                                            <ToggleButton x:Name="filterToggleButton"  BorderThickness="0"  Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}">
                                                <ToggleButton.Style>
                                                    <Style TargetType="ToggleButton">
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="ToggleButton">

                                                                    <Border  x:Name="MainBorder" Background="Transparent" Opacity="0.4" Padding="0,0,10,0">
                                                                        <Canvas Height="18" Width="18" >
                                                                            <Ellipse x:Name="Ellipse" Width="10" Height="10"
                                                                     Canvas.Left="0" Canvas.Top="-2"
                                                                     Stroke="{TemplateBinding Foreground}"
                                                                     StrokeThickness="1.5"/>
                                                                            <Line x:Name="Line" Canvas.Left="10" Canvas.Top="10"
                                                                  X1="-1.5" X2="3" Y1="-3.5" Y2="1"
                                                                  Stroke="{TemplateBinding Foreground}"
                                                                  StrokeThickness="2.5" RenderTransformOrigin="-0.034,-0.034"/>
                                                                        </Canvas>
                                                                    </Border>

                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter TargetName="MainBorder" Property="Opacity" Value="0.8"/>
                                                                        </Trigger>

                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding ElementName=filterDockPanel,Path=ActualHeight}" Value="35">
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="ToggleButton">
                                                                            <Border Background="Transparent">
                                                                                <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                                                                                    <Line X1="1.5" X2="5.5" Y1="-5.5" Y2="0.5" x:Name="L"
                                                                  Stroke="{TemplateBinding Foreground}"
                                                                  StrokeThickness="2"/>
                                                                                    <Line X1="5.5" X2="1.5" Y1="-5.5" Y2="0.5" x:Name="R"
                                                                  Stroke="{TemplateBinding Foreground}"
                                                                  StrokeThickness="2"/>
                                                                                </Grid>
                                                                            </Border>

                                                                            <ControlTemplate.Triggers>
                                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                                    <Setter TargetName="R" Property="Stroke" Value="{DynamicResource FilterClearButton.MouseOver.Foreground}"/>
                                                                                    <Setter TargetName="L" Property="Stroke" Value="{DynamicResource FilterClearButton.MouseOver.Foreground}"/>
                                                                                </Trigger>
                                                                                <Trigger Property="IsPressed" Value="True">
                                                                                    <Setter TargetName="R" Property="Stroke" Value="{DynamicResource FilterButton.Pressed.Foreground}"/>
                                                                                    <Setter TargetName="L" Property="Stroke" Value="{DynamicResource FilterButton.Pressed.Foreground}"/>
                                                                                </Trigger>
                                                                            </ControlTemplate.Triggers>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ToggleButton.Style>


                                            </ToggleButton>
                                        </Border>



                                    </Grid>

                                    <!--<Border x:Name="searchBorder" Background="{DynamicResource DataGrid.Static.Background}" Height="35" Width="15" Padding="0,7,0,0" >
                                     
                                        <ToggleButton x:Name="filterToggleButton"  OverridesDefaultStyle="True" BorderThickness="0" Opacity="0.4" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            

                                            <Border Background="Transparent" >
                                                <Canvas Height="18" Width="18" >
                                                    <Ellipse Width="10" Height="10" x:Name="E"
                                                                     Canvas.Left="-15" Canvas.Top="1"
                                                                     Stroke="{TemplateBinding Foreground}"
                                                                     StrokeThickness="1.5"/>
                                                    <Line Canvas.Left="10" Canvas.Top="10"
                                                                  X1="-16" X2="-12" Y1="-1.4" Y2="1.2" x:Name="L"
                                                                  Stroke="{TemplateBinding Foreground}"
                                                                  StrokeThickness="2.5"/>
                                                </Canvas>
                                            </Border>
                                        </ToggleButton>
                                    </Border>-->
                                    <ToggleButton x:Name="toggleButton" DockPanel.Dock="Right"
                        				Width="20" Style="{DynamicResource CustomReportTreeViewCollapserToggleButtonStyle}" Background="Transparent" IsChecked="{Binding IsCollapsed, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:CustomReportTreeView}}}" HorizontalAlignment="Right" RenderTransformOrigin="0.5,0.5" Margin="0,0,0,0" Height="35">
                                        <ToggleButton.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </ToggleButton.RenderTransform>

                                        <Path x:Name="path1" Data="M3.2626522E-54,7.125 L6.7916667,0 8.75,2.0625 3.8021715,7.2580704 8.75,12.25 6.7083333,14.375 z" Fill="{TemplateBinding Foreground}" StrokeThickness="0" Height="Auto" Width="Auto" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Path.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Path.RenderTransform>
                                        </Path>


                                    </ToggleButton>
                                </DockPanel>


                                <ScrollViewer >
                                    <DockPanel x:Name="_tv_scrollviewer_" Focusable="false"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        				Width="400" ScrollViewer.VerticalScrollBarVisibility="Auto"  Background="{TemplateBinding Background}">
                                        <ItemsPresenter  />
                                    </DockPanel>
                                </ScrollViewer>
                            </DockPanel>
                        </Border>

                        <ControlTemplate.Triggers>

                            <Trigger Property="local:CustomReportTreeView.IsCollapsed" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource Collapse}"/>

                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource Expand}"/>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </Trigger>
                            <Trigger SourceName="filterToggleButton" Property="IsChecked" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource FilterExpandStoryboard}"></BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource FilterCollapseStoryboard}"></BeginStoryboard>
                                </Trigger.ExitActions>

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                </Setter.Value>
            </Setter>
        </Style>

    </TreeView.Style>

</TreeView>
