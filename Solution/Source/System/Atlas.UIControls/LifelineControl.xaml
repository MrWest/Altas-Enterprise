<UserControl x:Class="CompanyName.Atlas.UIControls.LifelineControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:uiControls="clr-namespace:CompanyName.Atlas.UIControls"
             xmlns:common="clr-namespace:CompanyName.Atlas.Contracts.Presentation.Common;assembly=Atlas.Contracts"
             xmlns:converters="clr-namespace:CompanyName.Atlas.UIControls.Converters"
             xmlns:properties="clr-namespace:CompanyName.Atlas.UIControls.Properties"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300"
             Foreground="{DynamicResource AtlasTimelineLifelineControl.Static.Foreground}"
             
              d:DataContext="{d:DesignInstance common:ITreeNode}"
             Name="LifelineUc" SizeChanged="LifelineControl_OnSizeChanged" Loaded="LifelineControl_OnLoaded"
              MaxWidth="{Binding RelativeSource={RelativeSource AncestorType=uiControls:AtlasTimelineLifelinesGrid},Path=ActualWidth}">
    <UserControl.Resources>
        <converters:TimeLineScaleConverter x:Key="TimeLineScaleConverter"/>
        <Style x:Key="ExpandButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{DynamicResource AtlasLifelineExpanderButton.Static.Background}" />
            <Setter Property="Foreground"
                    Value="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=uiControls:LifelineControl}}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Padding" Value="3" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground"
                                        Value="{Binding ExpanderMouseOverForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=uiControls:LifelineControl}}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Foreground"
                                        Value="{Binding ExpanderPressedForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=uiControls:LifelineControl}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="InvestmentElementTreeViewCollapserButtonBaseStyle" TargetType="{x:Type ButtonBase}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Background" Value="{DynamicResource AddRootInvestmentElementButton.Static.Background}"/>
            <Setter Property="Foreground" Value="{DynamicResource AddRootInvestmentElementButton.Static.Foreground}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" FocusVisualStyle="{x:Null}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource AddRootInvestmentElementButton.MouseOver.Background}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource AddRootInvestmentElementButton.Pressed.Background}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource AddRootInvestmentElementButton.Disabled.Background}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource AddRootInvestmentElementButton.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Height" Value="35"/>
            <Setter Property="Padding" Value="0"/>
        </Style>

        <Style x:Key="InvestmentElementTreeViewCollapserButtonStyle"
               BasedOn="{StaticResource InvestmentElementTreeViewCollapserButtonBaseStyle}"
               TargetType="{x:Type Button}"/>

        <Style x:Key="InvestmentElementTreeViewCollapserToggleButtonStyle"
               BasedOn="{StaticResource InvestmentElementTreeViewCollapserButtonBaseStyle}"
               TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" FocusVisualStyle="{x:Null}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource AddRootInvestmentElementButton.MouseOver.Background}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource AddRootInvestmentElementButton.Pressed.Background}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource AddRootInvestmentElementButton.Disabled.Background}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource AddRootInvestmentElementButton.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter">
        </BooleanToVisibilityConverter>
        <converters:AnnoyingWidthAjustConverter x:Key="AnnoyingWidthAjustConverter"/>
    </UserControl.Resources>

    <Grid   >
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <Border x:Name="MainBorder"  Background="{Binding ControlBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=uiControls:LifelineControl}}"
                >
            <Grid  >
                <Grid.RowDefinitions>
                    <RowDefinition Height="35"/>
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <!--<Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                </Grid.ColumnDefinitions>-->
                <!-- This panel contains the header of the lifeline, where the name and elements count are displayed -->
              
                <DockPanel x:Name="NameDockPanel" HorizontalAlignment="Stretch">
                    <ToggleButton x:Name="ExpenderToggleButton" Margin="8,0,0,0" IsChecked="{Binding IsExpanded}" Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=uiControls:LifelineControl}}">
                        <ToggleButton.Style>
                            <Style TargetType="ToggleButton">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ToggleButton">
                                                <Border>
                                                <Grid x:Name="grid">
                                                    <Ellipse Fill="Transparent" Stroke="{x:Null}"/>
                                                    <Path x:Name="icon" Width="8" Height="8" Stretch="Uniform"
                                                      Margin="5"
                                                      Fill="{TemplateBinding Foreground}"
                                                      Data="{Binding IconData}"/>
                                                </Grid>
                                               
                                                </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>

                    </ToggleButton>
                    <StackPanel VerticalAlignment="Center" >
                        <TextBlock Text="{Binding Name}" FontSize="14" FontWeight="SemiBold" Margin="3,0"/>
                        <!--<TextBlock Text="{Binding Parent.TimeLineThickness}" FontSize="14"  />
                        <TextBlock Text="{Binding TimeLineThickness}" FontSize="14"  />-->
                        <!--<TextBlock TextWrapping="NoWrap" Text="{Binding RelativeSource={RelativeSource AncestorType=uiControls:LifelineControl},Path=Margin}" />-->
                        <!--<TextBlock TextWrapping="NoWrap" Text="{Binding RelativeSource={RelativeSource AncestorType=uiControls:AtlasTimelineLifelinesGrid},Path=ColumnWidth}" />-->
                    </StackPanel>
                    <ToggleButton x:Name="DetailsToggleButton" DockPanel.Dock="Right" MinWidth="12" ToolTip="{x:Static properties:Resources.Details}"  HorizontalAlignment="Right"  Margin="0,0,8,0" IsChecked="{Binding FakeIsExpanded}" Foreground="{DynamicResource DataGrid.Static.Foreground}">
                        <ToggleButton.Style>
                            <Style TargetType="ToggleButton">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <Border>
                                                <Grid x:Name="grid">
                                                    <Ellipse  Width="12" Height="12" Fill="Transparent" VerticalAlignment="Center" HorizontalAlignment="Center" StrokeThickness="2" Stroke="{TemplateBinding Foreground}" />
                                                    <Ellipse Width="4" Height="4" Fill="{TemplateBinding Foreground}" Stroke="{x:Null}" 
                                                             VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton},Path=IsChecked,Converter={StaticResource BooleanToVisibilityConverter}}"/>

                                                </Grid>

                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>

                    </ToggleButton>

                </DockPanel>

                <!--<Grid  Grid.Row="1" Grid.ColumnSpan="2"  >
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding AnyIsExpanded}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                                </DataTrigger>
                                --><!--<MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        --><!--<Condition Binding="{Binding ElementName=ExpenderToggleButton,Path=IsChecked}" Value="False"></Condition>--><!--
                                        <Condition Binding="{Binding AnyIsExpanded}" Value="True"></Condition>
                                        --><!--<Condition Binding="{Binding HasItems}" Value="False"></Condition>--><!--
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Visible"></Setter>
                                        --><!--<Setter Property="Background" Value="Red"></Setter>--><!--
                                    </MultiDataTrigger.Setters>
                                   
                                </MultiDataTrigger>-->
                                <!--<MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsExpanded}" Value="True"></Condition>
                                        --><!--<Condition Binding="{Binding FakeIsExpanded}" Value="True"></Condition>--><!--
                                        <Condition Binding="{Binding HasItems}" Value="True"></Condition>
                                    </MultiDataTrigger.Conditions>
                                    --><!--<Setter Property="Visibility" Value="Visible"></Setter>--><!--
                                    <Setter Property="Background" Value="Red"></Setter>
                                </MultiDataTrigger>-->
                                <!--<MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsExpanded}" Value="True"></Condition>
                                        <Condition Binding="{Binding FakeIsExpanded}" Value="True"></Condition>
                                        <Condition Binding="{Binding HasItems}" Value="True"></Condition>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Visible"></Setter>
                                </MultiDataTrigger>--><!--
                                
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>-->
                <uiControls:InnerLifeLineControl  Grid.Row="1" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" Visibility="{Binding ElementName=DetailsToggleButton,Path=IsChecked,Converter={StaticResource BooleanToVisibilityConverter}}"
                                                 MaxWidth="{Binding ElementName=MainBorder,Path=ActualWidth}"/>

                <!--</Grid>-->
                
               
                <!-- And this is the text contaning the lifeline's description -->
                <!--<TextBlock Grid.Row="1" Text="{Binding Description}" TextWrapping="Wrap" VerticalAlignment="Top"
                       Margin="0,15,0,0"
                       MaxHeight="65" MinHeight="65"
                       TextTrimming="WordEllipsis" TextOptions.TextFormattingMode="Display">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Description}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=uiControls:AtlasTimelineLifelinesGrid},Path=IsRoot}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>-->
            </Grid>
        </Border>
        <Border  Grid.Row="1" >
            <Grid>
               
                <Border  >
                    <Border.Resources>
                        <Storyboard x:Key="ExpandStoryboard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="140" >
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CollapseStoryboard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" >
                                <EasingDoubleKeyFrame KeyTime="0"  />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                               </EasingDoubleKeyFrame></DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </Border.Resources>
                    <Border.Style>
                        <Style TargetType="Border">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=ExpenderToggleButton, Path=IsChecked}" Value="False">
                                  
                                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                                    <!--<DataTrigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource CollapseStoryboard}"></BeginStoryboard>
                                    </DataTrigger.EnterActions>-->
                                    <!--<DataTrigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource ExpandStoryboard}"></BeginStoryboard>
                                    </DataTrigger.ExitActions>-->

                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    
                    <Grid>
                        <Rectangle Opacity="0.3" Fill="{Binding ControlBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=uiControls:LifelineControl}}"></Rectangle>

                        <uiControls:AtlasTimelineLifelinesGrid x:Name="TimelineLifelines"
                                                           MouseDown="Lifelines_OnMouseDown"
                                                           MouseUp="Lifelines_OnMouseUp"
                                                           MouseMove="Lifelines_OnMouseMove"
                                                           MouseWheel="Lifelines_OnMouseWheel"
                                                           IsRoot="False"
                                                           Zoom="{Binding Zoom, RelativeSource={RelativeSource FindAncestor, AncestorType=uiControls:LifelineControl},Mode=OneWay}"
                                                           Starts="{Binding Start}" Ends="{Binding End}"
                                                           ColumnWidth="{Binding ColumnWidth, RelativeSource={RelativeSource FindAncestor, AncestorType=uiControls:AtlasTimelineLifelinesGrid}}"
                                                           Scale="{Binding Scale, RelativeSource={RelativeSource FindAncestor, AncestorType=uiControls:AtlasTimelineGrid}}"
                                                           LifelineNode="{Binding }"
                                                              />
                        
                    </Grid>

                  
                </Border>
              
            </Grid>
        </Border>
      
    </Grid>
    
       

</UserControl>